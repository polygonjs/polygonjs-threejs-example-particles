import './style.css'

// document.querySelector('#app').innerHTML = `
//   <h1>Hello Vite!</h1>
//   <a href="https://vitejs.dev/guide/features.html" target="_blank">Documentation</a>
// `

import * as THREE from 'three'

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const geometry = new THREE.BoxGeometry();
const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
const cube = new THREE.Mesh( geometry, material );
scene.add( cube );

camera.position.z = 5;

import {loadScene_scene_01} from './src/polygonjs/scenes/scene_01/autogenerated/loadScene'
const loadedData = await loadScene_scene_01();
// Polygonjs particles need a renderer in order to be simulated.
// When you use Polygonjs as a standalone, this is taken care of automatically.
// But if you integrate it with threejs, you need to give it the renderer that will be used. 
loadedData.scene.registerRenderer(renderer);
// here we add polygonjs scene to your main scene.
scene.add(loadedData.scene.threejsScene());

const clock = new THREE.Clock()
function animate() {
  const delta = clock.getDelta()
  requestAnimationFrame( animate );
  
  // when using your own renderer,
  // you need to run `.update(delta)` on polygonjs scene
  // to allow it to track the current time and update its internals  
  loadedData.scene.update(delta);

  cube.rotation.x += 0.01;
  cube.rotation.y += 0.01;

  renderer.render( scene, camera );
};

animate();